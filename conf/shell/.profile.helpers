## Helpers

# colors
NORMAL=$(tput sgr0)
BRIGHT=$(tput bold)
BLINK=$(tput blink)
REVERSE=$(tput smso)
UNDERLINE=$(tput smul)
RED=$(tput setaf 1)
BLUE=$(tput setaf 4)
CYAN=$(tput setaf 6)
BLACK=$(tput setaf 0)
GREEN=$(tput setaf 2)
WHITE=$(tput setaf 7)
YELLOW=$(tput setaf 3)
MAGENTA=$(tput setaf 5)
LIME_YELLOW=$(tput setaf 190)
POWDER_BLUE=$(tput setaf 153)

# checks if command exists with zero status code
exists() {
    command -v $1 &> /dev/null
}

# makes a directory and cd to it
mkcd() {
    mkdir -p $1
	cd $1
}

# generates a random password and stores it in the clipboard
passgen() {
    pwgen -Bs $1 | pbcopy | pbpaste
}

# hub wrapper
# requires piotrmurach/github_cli
git() {
    if [ "$1" != "delete" ]; then
        hub $@
        return
    fi

    if [ -z "$2" ]; then
        echo "No repo name given."
        return 1
    fi

    if ! exists gcli; then
        echo "gcli is not available. run: gem install github_cli"
        return 1
    fi

    GCLI_USER=$(gcli config user.login)
    if [ -z "$GCLI_USER" ]; then
        echo "gcli's user.login config is not set. see: gcli help config"
        return 1
    fi

    if ! confirm "Deleting $GCLI_USER/$2 repo... sure? (y/N)"; then
        print "\nPwehhh!"
        return 1
    fi

    gcli repo delete $GCLI_USER $2
}

# git prev commit
git-prev() {
    git checkout HEAD~
}

# git next commit
git-next() {
    git log --reverse --pretty=%H master | grep -A 1 $(git rev-parse HEAD) | tail -n1 | xargs git checkout
}

# todolist wrapper
t() {
    if [[ -f "./.todos.json" || "$1" == "init" ]]; then
        todolist $@
        return
    fi

    WDIR=`pwd`
    cd $HOME

	todolist $@

	cd $WDIR
}

# vagrant wrapper for homestead
homestead() {
    ( cd ~/Homestead && vagrant $* )
}

# fixes file/dir permissions
fixperms() {
    if [ -z "$1" ]; then
        echo "Please specify the path to directory."
        return
    fi

    confirm "Are sure that you want to fix permissions on \"$1\"? [y/N]" || return

    # chmod all files to 644
    # chmod all dires to 755
    echo ""
    echo "== Fixing file permissions..."
    echo "`find $1 -type f -print -exec chmod u=rw,g=r,o=r {} \; | wc -l` files processed."
    echo "`find $1 -type d -print -exec chmod u=rwx,g=rx,o=rx {} \; | wc -l` directories processed."

    # Remove "com.apple.quarantine" flag (OSX)
    echo ""
    echo "== Removing files from OSX quarantine, if any..."
    find $1 -exec xattr -d com.apple.quarantine {} 2&>1 /dev/null \;
    echo "    Done!"

    # Unlock (OSX)
    echo ""
    echo "== Unlocking locked files, if any..."
    echo "    Done!"
    chflags -R nouchg $1
    chflags -R noschg $1
}

# makes a mysql database
mkdb() {
	if ! exists mysql; then
		echo 'MySQL is not available.'
		return 1
	fi

	if [ -z "$1" ]; then
		echo 'No database name provided.'
		return 1
	fi

	mysql -u root -p -e "drop database if exists $1; create database $1 default character set utf8 default collate utf8_unicode_ci;"
}

# drops a mysql database
rmdb() {
	if ! exists mysql; then
		echo 'MySQL is not available.'
		return 1
	fi

	if [ -z "$1" ]; then
		echo 'No database name provided.'
		return 1
	fi

	mysql -u root -p -e "drop database if exists $1;"
}

# makes the file/dir apache writeable
a2mkw() {
    WWW_USER=`ps aux | egrep 'apache|httpd' | awk '{ print $1 }' | sed '1 d' | sort | uniq | awk '{print}' ORS=' ' | sed "s/\b$(whoami)\|root\b//g" | xargs`

    echo ""
    echo "== Setting up writables..."
    echo "= Webserver is running by \"$WWW_USER\""

    chgrp -v -R $WWW_USER $1
    chmod -v -R u=rwx,g=rwx,o=rx $1
    echo ""
}

# php switcher
phpsw() {
    PHP_VERSIONS=('56' '70' '71')

    print "Switching to php$1, it may take a few moments..."

    if exists valet; then
        valet stop
    fi

    for version in "${PHP_VERSIONS[@]}"; do
        sudo brew services stop "php$version" > /dev/null 2>&1
        brew unlink "php$version" > /dev/null 2>&1
    done

    brew link "php$1" > /dev/null 2>&1

    if exists valet; then
        valet start
    fi

    php -v
}

